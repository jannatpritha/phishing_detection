# -*- coding: utf-8 -*-
"""Phishing Detection Code .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lNtJCTqQmi9TAOHpaxAwEIcMzGFGYRCY

# Import Section
"""

#install TLD
!pip install tld
import re
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
#from colorama import Fore
from sklearn.metrics import accuracy_score
from urllib.parse import urlparse
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from xgboost import XGBClassifier
from tld import get_tld, is_tld

"""# Import Dataset"""

data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/malicious_phish.csv')
data.head()

from google.colab import drive
drive.mount('/content/drive')

"""# Preprocessing"""

#Clean Dataset for Unwanted Values
data.dropna(subset=['url'], inplace=True)
data.dropna(subset=['type'], inplace=True)
def clean_dataset(data):
    assert isinstance(data, pd.DataFrame), "df needs to be a pd.DataFrame"
    data.dropna(inplace=True)
    indices_to_keep = ~data.isin([np.nan, np.inf, -np.inf]).any(axis=1)
    return data[indices_to_keep].astype(np.float64)

#remove WWW
data['url'] = data['url'].replace('www.', '', regex=True)

#Assign Values to the Types Accordingly
assign_type= {"Group": {"benign":0,"phishing":1,"defacement":2, "malware":3}}
data['Group'] = data['type']
data = data.replace(assign_type)
data

"""# Feature Extraction"""

#find if the url belongs to a specific IP Address
def does_have_ip_address(url):
    match = re.search(
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4 with port
        '((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)' # IPv4 in hexadecimal
        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|'
        '([0-9]+(?:\.[0-9]+){3}:[0-9]+)|'
        '((?:(?:\d|[01]?\d\d|2[0-4]\d|25[0-5])\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d|\d)(?:\/\d{1,2})?)', url)  # Ipv6
    if match:
        return 1
    else:
        return 0

#find the domain of the URL
def finding_domainName(url):
    try:
        value = get_tld(url, as_object = True, fail_silently=False,fix_protocol=True)
        name_of_domain= value.parsed_url.netloc
    except :
        name_of_domain= None
    return name_of_domain

#Finds abnormal Urls
def find_unusual_url(url):
    urlname = urlparse(url).hostname
    urlname = str(urlname)
    match = re.search(urlname, url)
    if match:
        return 1
    else:
        return 0

#It finds if the http is secure or not
def find_if_http_is_secure(url):
    is_secure = urlparse(url).scheme
    match = str(is_secure)
    if match=='https':
        return 1
    else:
        return 0

#Count each digit of the url and return the total value
def count_each_digit(url):
    value = 0
    for a in url:
        if a.isnumeric():
            value = value + 1
    return value

#find if the url used any shortening website
def is_the_url_shortened(url):
    match = re.search('bit\.ly|goo\.gl|shorte\.st|go2l\.ink|x\.co|ow\.ly|t\.co|tinyurl|tr\.im|is\.gd|cli\.gs|'
                      'yfrog\.com|migre\.me|ff\.im|tiny\.cc|url4\.eu|twit\.ac|su\.pr|twurl\.nl|snipurl\.com|'
                      'short\.to|BudURL\.com|ping\.fm|post\.ly|Just\.as|bkite\.com|snipr\.com|fic\.kr|loopt\.us|'
                      'doiop\.com|short\.ie|kl\.am|wp\.me|rubyurl\.com|om\.ly|to\.ly|bit\.do|t\.co|lnkd\.in|'
                      'db\.tt|qr\.ae|adf\.ly|goo\.gl|bitly\.com|cur\.lv|tinyurl\.com|ow\.ly|bit\.ly|ity\.im|'
                      'q\.gs|is\.gd|po\.st|bc\.vc|twitthis\.com|u\.to|j\.mp|buzurl\.com|cutt\.us|u\.bb|yourls\.org|'
                      'x\.co|prettylinkpro\.com|scrnch\.me|filoops\.info|vzturl\.com|qr\.net|1url\.com|tweez\.me|v\.gd|'
                      'tr\.im|link\.zip\.net',
                      url)
    if match:
        return 1
    else:
        return 0

data['find_length_of_url'] = data['url'].apply(lambda k: len(str(k)))
data['is_ip'] = data['url'].apply(lambda k: does_have_ip_address(k))
data['domain_name']= data['url'].apply(lambda k:finding_domainName(k))
data['unusual_url'] = data['url'].apply(lambda k: find_unusual_url(k))
data['is_secure'] = data['url'].apply(lambda k: find_if_http_is_secure(k))
data['digits']= data['url'].apply(lambda k: count_each_digit(k))
data['is_short'] = data['url'].apply(lambda k: is_the_url_shortened(k))

#for each signs creates a new column to count how many sign it has
alphaneumeric_character = ['+','$','!','*',',','//','@','?','-','=','.','#','%']
for character in alphaneumeric_character:
    data[character] = data['url'].apply(lambda i: i.count(character))

data

data.head(2)

"""# ML Section"""

#Divide Data Set
X = data.drop(['url','type','Group','domain_name','Shortining'],axis=1)#,'type_code'
y = data['Group']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=3)

"""Model"""

models = [RandomForestClassifier,KNeighborsClassifier,GaussianNB,AdaBoostClassifier,XGBClassifier]
accuracy_test = []

for m in models:

    print('The model is  =>\033[07m {} \033[0m'.format(m))
    #initializes the model
    model_ = m()

    model_.fit(X_train, y_train)
    pred = model_.predict(X_test)
    acc = accuracy_score(pred, y_test)
    accuracy_test.append(acc)
    print()
    print('Test Accuracy :\033[32m \033[01m {:.2f}% \033[30m \033[0m'.format(acc*100))
    print()

    print('\033[01m              Classification_report \033[0m')
    print(classification_report(y_test, pred))
    print('\033[01m             Confusion_matrix \033[0m')
    cf_matrix = confusion_matrix(y_test, pred)
    plot_ = sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True,fmt= '0.2%')
    plt.show()
    print('\033[31m###################- End -###################\033[0m')

"""# Check Provided URL"""

# Take input from the user
url = input("Provide a URL ")

# create a dictionary of data
test_data = {'urls': [url]}

# loop through the list and replace 'www.' with an empty string
for i in range(len(test_data['urls'])):
    test_data['urls'][i] = test_data['urls'][i].replace('www.', '')

# convert the dictionary to a dataframe
df = pd.DataFrame(test_data)

# apply the len() function to the 'urls' column

df['find_length_of_url']= df['urls'].apply(lambda k: len(str(k)))

#for each signs creates a new column to count how many sign it has
sign = ['@','?','-','=','.','#','%','+','$','!','*',',','//']
for a in sign:
    df[a] = df['urls'].apply(lambda i: i.count(a))
df.head()

#Finds abnormal Urls
def abnormal_url(url):
    hostname = urlparse(url).hostname
    hostname = str(hostname)
    match = re.search(hostname, url)
    if match:
        print(match.group())
        return 1
    else:
        #print('No matching pattern found')
        return 0

df['unusual_url'] = df['urls'].apply(lambda i: abnormal_url(i))

def httpSecure(url):
    htp = urlparse(url).scheme
    match = str(htp)
    if match=='https':
        # print match.group()
        return 1
    else:
        return 0

df['is_secure'] = df['urls'].apply(lambda i: httpSecure(i))

def digit_count(url):
    digits = 0
    for i in url:
        if i.isnumeric():
            digits = digits + 1
    return digits

df['digits']= df['urls'].apply(lambda i: digit_count(i))

def Shortining_Service(url):
    match = re.search('bit\.ly|goo\.gl|shorte\.st|go2l\.ink|x\.co|ow\.ly|t\.co|tinyurl|tr\.im|is\.gd|cli\.gs|'
                      'yfrog\.com|migre\.me|ff\.im|tiny\.cc|url4\.eu|twit\.ac|su\.pr|twurl\.nl|snipurl\.com|'
                      'short\.to|BudURL\.com|ping\.fm|post\.ly|Just\.as|bkite\.com|snipr\.com|fic\.kr|loopt\.us|'
                      'doiop\.com|short\.ie|kl\.am|wp\.me|rubyurl\.com|om\.ly|to\.ly|bit\.do|t\.co|lnkd\.in|'
                      'db\.tt|qr\.ae|adf\.ly|goo\.gl|bitly\.com|cur\.lv|tinyurl\.com|ow\.ly|bit\.ly|ity\.im|'
                      'q\.gs|is\.gd|po\.st|bc\.vc|twitthis\.com|u\.to|j\.mp|buzurl\.com|cutt\.us|u\.bb|yourls\.org|'
                      'x\.co|prettylinkpro\.com|scrnch\.me|filoops\.info|vzturl\.com|qr\.net|1url\.com|tweez\.me|v\.gd|'
                      'tr\.im|link\.zip\.net',
                      url)
    if match:
        return 1
    else:
        return 0

df['is_short'] = df['urls'].apply(lambda x: Shortining_Service(x))

def having_ip_address(url):
    match = re.search(
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4 with port
        '((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)' # IPv4 in hexadecimal
        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|'
        '([0-9]+(?:\.[0-9]+){3}:[0-9]+)|'
        '((?:(?:\d|[01]?\d\d|2[0-4]\d|25[0-5])\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d|\d)(?:\/\d{1,2})?)', url)  # Ipv6
    if match:
        return 1
    else:
        return 0

df['is_ip'] = df['urls'].apply(lambda i: having_ip_address(i))

df

test_url = df.drop(['urls'],axis=1)#,'type_code'
test_type= [1]
test_url

X_test

models = [XGBClassifier]

for m in models:

    print('The model is  =>\033[07m {} \033[0m'.format(m))
    #initializes the model
    model_ = m()
    model_.fit(X_train, y_train)
    pred = model_.predict(df)

models = [XGBClassifier]

for m in models:

    print('The model is  =>\033[07m {} \033[0m'.format(m))
    #initializes the model
    model_ = m()
    model_.fit(X_train, y_train)
    pred = model_.predict(df)

if pred == '0':
    print("It is Benign")
elif pred == '1':
    print("It is Phishing")
elif pred == '2':
    print("It is Defacement")
elif pred == '3':
    print("It is Malware")